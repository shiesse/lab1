from flask import Flask, request,jsonify
import math
from datetime import datetime
import calendar
from num2words import num2words
app = Flask(__name__)
#---------------------------------------------

@app.route('/number_to_words/<int:n>', methods=['GET'])
def number_to_words(n):
    return num2words(n,lang='ru')


#---------------------------------------------
@app.route('/solve_equation', methods=['GET'])
def solve_equation():
    # Получение значений a, b и c из параметров запроса
    a = float(request.args.get('a'))
    b = float(request.args.get('b'))
    c = float(request.args.get('c'))

    # Расчет дискриминанта
    discriminant = b**2 - 4*a*c

    if discriminant > 0:
        # Два корня
        x1 = (-b + math.sqrt(discriminant)) / (2*a)
        x2 = (-b - math.sqrt(discriminant)) / (2*a)
        solution = f"x1 = {x1}, x2 = {x2}"
    elif discriminant == 0:
        # Один корень
        x = -b / (2*a)
        solution = f"x = {x}"
    else:
        # Действительных корней нет
        solution = "No real solutions"

    return solution
#---------------------------------------------

@app.route('/day_of_week', methods=['GET'])
def day_of_week():
    # Функция, которая возвращает день недели по заданной дате
    # Пример запроса: /day_of_week?date=12.12.2028
    # Ответ: "Среда"
    
    # Получение значения даты из параметра запроса
    date_str = request.args.get('date')
    date = datetime.strptime(date_str, '%d.%m.%Y')
    
    # Получение дня недели
    day = calendar.day_name[date.weekday()]
    
    return day
#---------------------------------------------
def fibonacci(n):
    if n <= 0:
        return 0
    elif n == 1:
        return 1
    else:
        fib_prev = 0
        fib_curr = 1
        for _ in range(2, n + 1):
            fib_next = fib_prev + fib_curr
            fib_prev = fib_curr
            fib_curr = fib_next
        return fib_curr

@app.route('/fibonacci/<int:n>', methods=['GET'])
def calculate_fibonacci(n):
    result = fibonacci(n)
    return str(result)

#---------------------------------------------
regions = {
     '01': 'Республика Адыгея',
    '02': 'Республика Башкортостан',
    '03': 'Республика Бурятия',
    '04': 'Республика Алтай',
    '05': 'Республика Дагестан',
    '06': 'Республика Ингушетия',
    '07': 'Кабардино-Балкарская Республика',
    '08': 'Республика Калмыкия',
    '09': 'Республика Карачаево-Черкессия',
    '10': 'Республика Карелия',
    '11': 'Республика Коми',
    '12': 'Республика Марий Эл',
    '13': 'Республика Мордовия',
    '14': 'Республика Саха (Якутия)',
    '15': 'Республика Северная Осетия - Алания',
    '16': 'Республика Татарстан',
    '17': 'Республика Тыва',
    '18': 'Удмуртская Республика',
    '19': 'Республика Хакасия',
    '20': 'Чеченская Республика',
    '21': 'Чувашская Республика',
    '22': 'Алтайский край',
    '23': 'Краснодарский край',
    '24': 'Красноярский край',
    '25': 'Приморский край',
    '26': 'Ставропольский край',
    '27': 'Хабаровский край',
    '28': 'Амурская область',
    '29': 'Архангельская область',
    '30': 'Астраханская область',
    '31': 'Белгородская область',
    '32': 'Брянская область',
    '33': 'Владимирская область',
    '34': 'Волгоградская область',
    '35': 'Вологодская область',
    '36': 'Воронежская область',
    '37': 'Ивановская область',
    '38': 'Иркутская область',
    '39': 'Калининградская область',
    '40': 'Калужская область',
    '41': 'Камчатский край',
    '42': 'Кемеровская область',
    '43': 'Кировская область',
    '44': 'Костромская область',
    '45': 'Курганская область',
    '46': 'Курская область',
    '47': 'Ленинградская область',
    '48': 'Липецкая область',
    '49': 'Магаданская область',
    '50': 'Московская область',
    '51': 'Мурманская область',
    '52': 'Нижегородская область',
    '53': 'Новгородская область',
    '54': 'Новосибирская область',
    '55': 'Омская область',
    '56': 'Оренбургская область',
    '57': 'Орловская область',
    '58': 'Пензенская область',
    '59': 'Пермский край',
    '60': 'Псковская область',
    '61': 'Ростовская область',
    '62': 'Рязанская область',
    '63': 'Самарская область',
    '64': 'Саратовская область',
    '65': 'Сахалинская область',
    '66': 'Свердловская область',
    '67': 'Смоленская область',
    '68': 'Тамбовская область',
    '69': 'Тверская область',
    '70': 'Томская область',
    '71': 'Тульская область',
    '72': 'Тюменская область',
    '73': 'Ульяновская область',
    '74': 'Челябинская область',
    '75': 'Забайкальский край',
    '76': 'Ярославская область',
    '77': 'г. Москва',
    '78': 'г. Санкт-Петербург',
    '79': 'Еврейская автономная область',
    '80': 'Забайкальский край',
    '81': 'Пермский край',
    '82': 'Республика Крым',
    '83': 'Ненецкий автономный округ',
    '84': 'Красноярский край',
    '85': 'Иркутская область',
    '86': 'Ханты-Мансийский автономный округ - Югра',
    '87': 'Чукотский автономный округ',
    '88': 'Ямало-Ненецкий автономный округ',
    '89': 'Московская область',
    '90': 'Калининградская область',
    '91': 'Севастополь',
    '92': 'Краснодарский край',
    '93': 'Владимирская область',
    '94': 'Саратовская область',
    '95': 'Архангельская область',
    '96': 'Вологодская область',
    '97': 'Рязанская область',
    '98': 'Оренбургская область',
    '99': 'Нижегородская область'
}

@app.route('/region/<region_code>', methods=['GET'])
def get_region_name(region_code):
    try:
        region_name = regions.get(region_code)
        if region_name:
            return region_name
        else:
            return "Регион не найден"
    except Exception as e:
        return str(e)
#---------------------------------------------
if __name__ == '__main__':
    app.run()
